{"version":3,"file":"static/js/Cast.b0bd7c00.chunk.js","mappings":"0PAEaA,EAAWC,EAAAA,GAAAA,GAAH,+NAURC,EAAWD,EAAAA,GAAAA,GAAH,iVAeRE,EAAYF,EAAAA,GAAAA,GAAH,gDAITG,EAAUH,EAAAA,GAAAA,IAAH,iG,SCuBpB,EAhDa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAejB,OAbAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,IACbQ,EAAAA,EAAAA,IAASP,GACNQ,MAAK,SAAAC,GACJZ,EAAQY,EAASb,MACjBG,GAAa,MAEdW,OAAM,SAAAC,GACLZ,GAAa,GACbK,EAAS,UAEZ,CAACJ,EAASI,EAAUF,KAGrB,2BACGJ,GAAac,EAAAA,QAAAA,KAAa,eACzBd,GAAac,EAAAA,QAAAA,SACdhB,GAAwB,IAAhBA,EAAKiB,QACZ,SAACvB,EAAD,UACGM,EAAKkB,KAAI,SAAAlB,GAAI,OACZ,UAACJ,EAAD,YACE,SAACE,EAAD,CACEqB,IACEnB,EAAKoB,aAAL,0CACuCpB,EAAKoB,cACxC,uKAENC,IAAKrB,EAAKsB,MAAQtB,EAAKuB,iBAEzB,SAAC1B,EAAD,UAAYG,EAAKsB,MAAQtB,EAAKuB,kBATjBvB,EAAKwB,eAcxB,wE,0MC9CRC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCACVC,EAAO,QAEAC,EAAW,mCAAG,WAAMC,GAAN,uFACFJ,IAAAA,IAAA,mBACTE,EADS,wBACWD,EADX,iBAC2BG,IAFzB,cACnBhB,EADmB,yBAIlBA,EAASiB,MAJS,2CAAH,sDAOXC,EAAc,mCAAG,WAAOC,EAAOH,GAAd,uFACLJ,IAAAA,IAAA,iBACXE,EADW,oBACKD,EADL,kBACsBM,EADtB,iBACoCH,IAF/B,cACtBI,EADsB,yBAIrBA,EAASH,MAJY,2CAAH,wDAOdI,EAAU,mCAAG,WAAMC,GAAN,uFACDV,IAAAA,IAAA,UAClBE,EADkB,YACVQ,EADU,oBACIT,EADJ,oBADC,cAClBb,EADkB,yBAIjBA,EAASiB,MAJQ,2CAAH,sDAOVnB,EAAQ,mCAAG,WAAMwB,GAAN,uFACCV,IAAAA,IAAA,UAClBE,EADkB,YACVQ,EADU,4BACYT,EADZ,oBADD,cAChBO,EADgB,yBAIfA,EAASH,MAJM,2CAAH,sDAORM,EAAU,mCAAG,WAAMD,GAAN,uFACDV,IAAAA,IAAA,UAClBE,EADkB,YACVQ,EADU,4BACYT,EADZ,2BADC,cAClBO,EADkB,yBAIjBA,EAASH,MAJQ,2CAAH","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/API.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 30px);\n  grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));\n  gap: 30px;\n  margin: 0px auto;\n  padding: 15px 0px 0px;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  height: 95%;\n  width: 100%;\n  border-radius: 5px;\n  overflow: hidden;\n  background-color: #bdb9a6;\n  box-shadow: -2px -2px 7px rgb(109, 109, 109);\n  transition: transform 300ms cubic-bezier(0.165, 0.84, 0.44, 1);\n  :hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const CastTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  height: 80%;\n  object-fit: cover;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { getCasts } from '../../services/API';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { CastImg, CastItem, CastList, CastTitle } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getCasts(movieId)\n      .then(response => {\n        setCast(response.cast);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        setIsLoading(false);\n        navigate('/');\n      });\n  }, [movieId, navigate, pathname]);\n\n  return (\n    <div>\n      {isLoading && Loading.dots('Loading...')}\n      {!isLoading && Loading.remove()}\n      {cast && cast.length !== 0 ? (\n        <CastList>\n          {cast.map(cast => (\n            <CastItem key={cast.cast_id}>\n              <CastImg\n                src={\n                  cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${cast.profile_path}`\n                    : 'https://media.istockphoto.com/vectors/no-image-available-icon-vector-id1216251206?b=1&k=20&m=1216251206&s=170667a&w=0&h=z0hxu_BaI_tuMjMneE_APbnx_-R2KGPXgDjdwLw5W7o='\n                }\n                alt={cast.name || cast.original_name}\n              />\n              <CastTitle>{cast.name || cast.original_name}</CastTitle>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <h3>There are no information about cast ;(</h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_key = '87ba1964cd0d4ac84a7dd149ae2711fb';\nconst type = 'movie';\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `trending/${type}/day?api_key=${API_key}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const getSearchQuery = async (query, page) => {\n  const responce = await axios.get(\n    `search/${type}?api_key=${API_key}&query=${query}&page=${page}`\n  );\n  return responce.data;\n};\n\nexport const getDetails = async id => {\n  const response = await axios.get(\n    `${type}/${id}?api_key=${API_key}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCasts = async id => {\n  const responce = await axios.get(\n    `${type}/${id}/credits?api_key=${API_key}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getReviews = async id => {\n  const responce = await axios.get(\n    `${type}/${id}/reviews?api_key=${API_key}&language=en-US&page=1`\n  );\n  return responce.data;\n};\n"],"names":["CastList","styled","CastItem","CastTitle","CastImg","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","pathname","useLocation","navigate","useNavigate","useEffect","getCasts","then","response","catch","error","Loading","length","map","src","profile_path","alt","name","original_name","cast_id","axios","API_key","type","getTrending","page","data","getSearchQuery","query","responce","getDetails","id","getReviews"],"sourceRoot":""}