{"version":3,"file":"static/js/Reviews.8b190500.chunk.js","mappings":"wOA8CA,EAzCgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MAgBjB,OAbAC,EAAAA,EAAAA,YAAU,WACRP,GAAa,IACbQ,EAAAA,EAAAA,IAAWP,GACRQ,MAAK,SAAAC,GACJZ,EAAWY,GACXV,GAAa,MAEdW,OAAM,SAAAC,GACLZ,GAAa,GACbK,EAAS,UAEZ,CAACF,EAAUF,EAASI,KAGrB,2BACGN,GAAac,EAAAA,QAAAA,KAAa,eACzBd,GAAac,EAAAA,QAAAA,SACdhB,GAAsC,IAA3BA,EAAQiB,QAAQC,QAC1B,wBACGlB,EAAQiB,QAAQE,KAAI,SAAAC,GAAM,OACzB,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOG,UAOpB,0F,0MCvCRC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCACVC,EAAO,QAEAC,EAAW,mCAAG,WAAMC,GAAN,uFACFJ,IAAAA,IAAA,mBACTE,EADS,wBACWD,EADX,iBAC2BG,IAFzB,cACnBf,EADmB,yBAIlBA,EAASgB,MAJS,2CAAH,sDAOXC,EAAc,mCAAG,WAAOC,EAAOH,GAAd,uFACLJ,IAAAA,IAAA,iBACXE,EADW,oBACKD,EADL,kBACsBM,EADtB,iBACoCH,IAF/B,cACtBI,EADsB,yBAIrBA,EAASH,MAJY,2CAAH,wDAOdI,EAAU,mCAAG,WAAMV,GAAN,uFACDC,IAAAA,IAAA,UAClBE,EADkB,YACVH,EADU,oBACIE,EADJ,oBADC,cAClBZ,EADkB,yBAIjBA,EAASgB,MAJQ,2CAAH,sDAOVK,EAAQ,mCAAG,WAAMX,GAAN,uFACCC,IAAAA,IAAA,UAClBE,EADkB,YACVH,EADU,4BACYE,EADZ,oBADD,cAChBO,EADgB,yBAIfA,EAASH,MAJM,2CAAH,sDAORlB,EAAU,mCAAG,WAAMY,GAAN,uFACDC,IAAAA,IAAA,UAClBE,EADkB,YACVH,EADU,4BACYE,EADZ,2BADC,cAClBO,EADkB,yBAIjBA,EAASH,MAJQ,2CAAH","sources":["components/Reviews/Reviews.jsx","services/API.jsx"],"sourcesContent":["import { getReviews } from '../../services/API';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  // console.log('Revievs:', useLocation());\n\n  useEffect(() => {\n    setIsLoading(true);\n    getReviews(movieId)\n      .then(response => {\n        setReviews(response);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        setIsLoading(false);\n        navigate('/');\n      });\n  }, [pathname, movieId, navigate]);\n\n  return (\n    <div>\n      {isLoading && Loading.dots('Loading...')}\n      {!isLoading && Loading.remove()}\n      {reviews && reviews.results.length !== 0 ? (\n        <ul>\n          {reviews.results.map(review => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <h3>Oops... There are no reviews yet... ¯_(ツ) _/¯</h3>\n      )}\n    </div>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_key = '87ba1964cd0d4ac84a7dd149ae2711fb';\nconst type = 'movie';\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `trending/${type}/day?api_key=${API_key}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const getSearchQuery = async (query, page) => {\n  const responce = await axios.get(\n    `search/${type}?api_key=${API_key}&query=${query}&page=${page}`\n  );\n  return responce.data;\n};\n\nexport const getDetails = async id => {\n  const response = await axios.get(\n    `${type}/${id}?api_key=${API_key}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCasts = async id => {\n  const responce = await axios.get(\n    `${type}/${id}/credits?api_key=${API_key}&language=en-US`\n  );\n  return responce.data;\n};\n\nexport const getReviews = async id => {\n  const responce = await axios.get(\n    `${type}/${id}/reviews?api_key=${API_key}&language=en-US&page=1`\n  );\n  return responce.data;\n};\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","pathname","useLocation","navigate","useNavigate","useEffect","getReviews","then","response","catch","error","Loading","results","length","map","review","author","content","id","axios","API_key","type","getTrending","page","data","getSearchQuery","query","responce","getDetails","getCasts"],"sourceRoot":""}